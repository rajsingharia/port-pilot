
type Server struct {
	listener  net.Listener
	clientMap map[string]net.Conn
}


func (s *Server) handleConnections() {
	for {
		conn, err := s.listener.Accept()
		if err != nil {
			fmt.Println("Error accepting connection:", err)
			continue
		}
		go s.handleClient(conn)
	}
}

func (s *Server) handleClient(conn net.Conn) {
	defer conn.Close()

	// Read tunnel creation request from localClient
	var targetHost, targetPort string
	targetHost = "localhost"
	targetPort = "8080"
	//fmt.Fscanf(conn, "%s %s", &targetHost, &targetPort) // Read target host and port

	subdomain := generateUniqueSubdomain()

	targetConn, err := net.Dial("tcp", targetHost+":"+targetPort)
	if err != nil {
		fmt.Fprintln(conn, "Error connecting to target:", err)
		return
	}
	defer targetConn.Close()

	s.clientMap[subdomain] = targetConn

	fmt.Fprintln(conn, subdomain)

	go s.handleTunnel(conn, subdomain, targetConn)

}

func StartServer(port int) error {
	listener, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
	if err != nil {
		return err
	}
	server := &Server{
		listener:  listener,
		clientMap: make(map[string]net.Conn),
	}
	fmt.Println("Server listening on port", port)
	go server.handleConnections()
	return nil
}




func (s *Server) handleTunnel(localConn net.Conn, subdomain string, targetConn net.Conn) {
	defer localConn.Close()
	defer targetConn.Close()

	// Forward data bi-directionally between localClient and target destination
	proxy := func(fromConn net.Conn, toConn net.Conn) {
		defer fromConn.Close()
		defer toConn.Close()
		buf := make([]byte, 4096)
		for {
			n, err := fromConn.Read(buf)
			if err != nil {
				return
			}
			_, err = toConn.Write(buf[:n])
			if err != nil {
				return
			}
		}
	}

	go proxy(localConn, targetConn)
	proxy(targetConn, localConn)

	// Remove the subdomain from the map when the tunnel is closed
	delete(s.clientMap, subdomain)
}

func generateUniqueSubdomain() string {
	// Implement your preferred logic for generating unique subdomains (e.g., random alphanumeric strings)
	return "unique_subdomain"
}

func main() {
	// Start the server on a specific port (replace with your desired port)
	err := StartServer(8080)
	if err != nil {
		fmt.Println("Error starting server:", err)
		return
	}

	// Keep the main goroutine running (optional, can be removed)
	select {}
}
